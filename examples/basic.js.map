{"version":3,"sources":["webpack:///./examples/basic.js"],"names":["mockData","mockTree","Test","state","dataSource","selectedKey","children","key","selectedData","data","isLeaf","float","setState","nodeData","findInTree","node","withAppendData","console","log","atTreePath","loc","PureComponent","ReactDOM","render","document","getElementById"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;;AAEA,IAAMA,WAAWC,oEAAQA,CAAC,CAAT,CAAjB;;IAEMC,I;;;;;;;;;;;;;;kLAEJC,K,GAAQ;AACNC,kBAAYJ,QADN;AAENK,mBAAaL,SAAS,CAAT,EAAYM,QAAZ,CAAqB,CAArB,EAAwBC,GAF/B;AAGNC,oBAAc;AAHR,K;;;;;6BAMC;AAAA;;AAAA,UACCJ,UADD,GACgB,KAAKD,KADrB,CACCC,UADD;;AAEP,aACE;AAAA;AAAA;AACE,oEAAC,qDAAD;AACE,sBAAYA,UADd;AAEE,sBAAY;AAAA,gBAAGK,IAAH,SAAGA,IAAH;AAAA,gBAASC,MAAT,SAASA,MAAT;AAAA,mBACV;AAAA;AAAA;AAAOD,mBAAKF,GAAZ;AAAA;AAAkB,eAACG,MAAD,IAAW;AAAA;AAAA,kBAAM,OAAO,EAAEC,OAAO,OAAT,EAAb;AAAA;AAAA;AAA7B,aADU;AAAA,WAFd;AAKE,uBAAa,KAAKR,KAAL,CAAWE,WAL1B;AAME,oBAAU,kBAACA,WAAD,SAA2B;AAAA,gBAAXI,IAAW,SAAXA,IAAW;;AACnC,mBAAKG,QAAL,CAAc,EAAEP,wBAAF,EAAeG,cAAcC,IAA7B,EAAd;AACA,gBAAMI,WAAWC,sEAAUA,CAACV,UAAX,EAAuB,UAACW,IAAD;AAAA,qBAAUA,KAAKR,GAAL,KAAaF,WAAvB;AAAA,aAAvB,EAA2D,EAAEW,gBAAgB,IAAlB,EAA3D,CAAjB;AACA,gBAAIH,QAAJ,EAAc;AACZI,sBAAQC,GAAR,CAAY,eAAZ,EAA6BC,sEAAUA,CAACf,UAAX,EAAuBS,SAASO,GAAhC,CAA7B;AACD;AACF;AAZH,UADF;AAAA;AAegB,aAAKjB,KAAL,CAAWE;AAf3B,OADF;AAoBD;;;;EA9BgBgB,oD;;AAiCnBC,iDAAQA,CAACC,MAAT,CAAgB,4DAAC,IAAD,OAAhB,EAA0BC,SAASC,cAAT,CAAwB,iBAAxB,CAA1B,E","file":"examples/basic.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport ReactDOM from 'react-dom';\nimport ReactFinder from '../src';\nimport { mockTree, findInTree, atTreePath } from '../src/utils';\n\nconst mockData = mockTree(3);\n\nclass Test extends PureComponent {\n\n  state = {\n    dataSource: mockData,\n    selectedKey: mockData[0].children[0].key,\n    selectedData: null\n  }\n\n  render() {\n    const { dataSource } = this.state;\n    return (\n      <div>\n        <ReactFinder\n          dataSource={dataSource}\n          renderItem={({ data, isLeaf }) => (\n            <span>{data.key} {!isLeaf && <span style={{ float: 'right' }}>></span>}</span>\n          )}\n          selectedKey={this.state.selectedKey}\n          onSelect={(selectedKey, { data }) => {\n            this.setState({ selectedKey, selectedData: data });\n            const nodeData = findInTree(dataSource, (node) => node.key === selectedKey, { withAppendData: true });\n            if (nodeData) {\n              console.log('selected node', atTreePath(dataSource, nodeData.loc));\n            }\n          }}\n        />\n        selectedKey: {this.state.selectedKey}\n      </div>\n\n    );\n  }\n}\n\nReactDOM.render(<Test />, document.getElementById('__react-content'));\n\n\n\n// WEBPACK FOOTER //\n// ./examples/basic.js"],"sourceRoot":""}